Tutorial 0: Creación de un Docker

Autor: Joaquin Peñuela Parra.

Para este tutorial tomarémos como ejemplo la creación del Docker del profe Andrés Flórez.

1. Ingresar al servidor:

ssh -Y j.penuela@hep-server2.uniandes.edu.co 

2. Revisar que puertos ya tienen asociado un Docker, para esto basta con ejecutar el siguiente comando:


docker ps -a

Se imprimirá algo asi en la consola:

CONTAINER ID   IMAGE                                          COMMAND       CREATED         STATUS                     PORTS                                       NAMES
a2baf41ff3d3   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   3 months ago    Up 2 months                0.0.0.0:4950->4950/tcp, :::4950->4950/tcp   jupyroot_JP
01dd78b00505   cfrc2694/hep-colliders-tools:lastest           "/bin/bash"   6 months ago    Exited (1) 3 months ago                                                jupyroot_Cristian_2
1aaae672dac0   cfrc2694/hep-colliders-tools:lastest           "/bin/bash"   6 months ago    Exited (1) 3 months ago                                                jupyroot_Cristian
66abf9cf97c8   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   11 months ago   Up 10 months               0.0.0.0:1111->1111/tcp, :::1111->1111/tcp   jupyroot_Daniel
a2129f2d0085   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   11 months ago   Up 8 weeks                 0.0.0.0:1234->1234/tcp, :::1234->1234/tcp   Joel_Docker
e8bd3e9f3a96   rootproject/root-conda                         "/bin/bash"   17 months ago   Up 4 months                                                            pyroot
aac4aa9961e7   rootproject/root-conda                         "/bin/bash"   17 months ago   Exited (0) 17 months ago

Aquí se puede ver que los puertos 4950, 1111 y 1234 ya están ocupados. Es necesario pensar en otra combinación de 4 números (cada docker debe tener un puerto) para la creación del nuevo Docker. 

2. Montar una imagen de un Docker creado anteriormente (el docker jjonesperez/pucp-madgraph-pythia-delphes:0.7 es uno que está bastante avanzado) para no empezar desde cero. Para hacer esto bastaría con usar la siguiente línea de código (no la corran hasta acabar de leer este paso):

docker run -it -t --mount type=bind,source=/disco1,target=/disco1 --mount type=bind,source=/disco2,target=/disco2 --mount type=bind,source=/disco3,target=/disco3 --mount type=bind,source=/disco4,target=/disco4 --mount type=bind,source=/Madgraph_Simulations,target=/Madgraph_Simulations --device /dev/fuse -d -p 4950:4950 --name=jupyroot_JP jjonesperez/pucp-madgraph-pythia-delphes:0.7

Antes de correr está linea en el servidor es necesario hacer lo siguiente:

- Cambiar los números en "4950:4950" por la combinación pensada en el paso anterior. Podrían ser "2502:2502"
- Cambiar el nombre del docker "--name=jupyroot_JP" por un nombre que queramos usar. Puede ser "--name=jupyroot_AFlorez"
- (Opcional) cambiar permisos. Así como está escrita la línea de código da permisos completos de lectura y escritura. No obstante, si quisieramos límitar los permisos de lectura que el docker tendrá en el disco 2 habría que añadir "readonly", así: "--mount type=bind,source=/disco2,target=/disco2,readonly".

Teniendo en cuenta todo lo anterior nos quedaría la siguiente línea de código:

docker run -it -t --mount type=bind,source=/disco1,target=/disco1 --mount type=bind,source=/disco2,target=/disco2 --mount type=bind,source=/disco3,target=/disco3 --mount type=bind,source=/disco4,target=/disco4 --mount type=bind,source=/Madgraph_Simulations,target=/Madgraph_Simulations --device /dev/fuse -d -p 2502:2502 --name=jupyroot_AFlorez jjonesperez/pucp-madgraph-pythia-delphes:0.7

3. Revisar que el Docker se creo correctamente, para esto basta con usar nuevamente:

docker ps -a

CONTAINER ID   IMAGE                                          COMMAND       CREATED          STATUS                     PORTS                                       NAMES
8be9f857443a   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   19 seconds ago   Up 17 seconds              0.0.0.0:2502->2502/tcp, :::2502->2502/tcp   jupyroot_AFlorez
a2baf41ff3d3   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   3 months ago     Up 2 months                0.0.0.0:4950->4950/tcp, :::4950->4950/tcp   jupyroot_JP
01dd78b00505   cfrc2694/hep-colliders-tools:lastest           "/bin/bash"   6 months ago     Exited (1) 3 months ago                                                jupyroot_Cristian_2
1aaae672dac0   cfrc2694/hep-colliders-tools:lastest           "/bin/bash"   6 months ago     Exited (1) 3 months ago                                                jupyroot_Cristian
66abf9cf97c8   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   11 months ago    Up 10 months               0.0.0.0:1111->1111/tcp, :::1111->1111/tcp   jupyroot_Daniel
a2129f2d0085   jjonesperez/pucp-madgraph-pythia-delphes:0.7   "/bin/bash"   11 months ago    Up 8 weeks                 0.0.0.0:1234->1234/tcp, :::1234->1234/tcp   Joel_Docker
e8bd3e9f3a96   rootproject/root-conda                         "/bin/bash"   17 months ago    Up 4 months                                                            pyroot
aac4aa9961e7   rootproject/root-conda                         "/bin/bash"   17 months ago    Exited (0) 17 months ago                                               HEPpyroot

Efectivamente ahora aparece uno nuevo.

4. Abrir el Docker como administrador:

docker attach jupyroot_AFlorez

Al hacerlo entraremos a la terminal del Docker, debe verse algo así:

[j.penuela@hep-server2 ~]$ docker attach jupyroot_AFlorez
[root@8be9f857443a Collider]#

Es decir, estamos dentro del docker.

5. Instalar software restante. La imagen que usamos como base (jjonesperez/pucp-madgraph-pythia-delphes:0.7) ya estaba bastante avanzada (tiene root, delphes, etc.). No obstante, aun es necesario instalar algunos programas (jupyter, pandas, etc.). 

dnf install -y nano
pip install pandas
pip install wget
pip install jupyter
pip install jupyterlab
pip install matplotlib
pip install jupyterhub
pip install metakernel
pip install uproot
pip install pyppeteer
pip install ipyparallel
pip install nbconvert
pip install etaprogress
pip install nbconvert[webpdf]
dnf install -y nano
dnf install -y sshfs
dnf install -y sshpass
dnf install -y htop
dnf install -y texlive
dnf install -y texlive-tcolorbox
dnf install -y texlive-upquote
dnf install -y texlive-adjustbox
dnf install -y texlive-titling
dnf install -y texlive-ulem
dnf install -y pandoc

Esto se puede demorar unos minutos dependiendo la velocidad del internet.

6. Hacer los siguientes cambios al archivo .bashrc (este archivo contiene las acciones que se realizan cada vez que se abre una terminal, la idea es añadir un código para que el Docker abra un jupyter_lab en el cual podamos trabajar comodamente.

Para esto primero debemos hacer lo siguiente:

nano ~/.bashrc

Ahora es necesario añadir lo siguiente luego de la última linea (source /Collider/ROOT/installROOT/bin/thisroot.sh):

LS_COLORS=$LS_COLORS:'ow=01;35:' ; export LS_COLORS
cd /disco4/personal_folders/AFlorez
nohup jupyter-lab --ip 0.0.0.0 --port 2502 --no-browser --allow-root --ServerApp.token=password > ~/jupyroot.out &
sleep 3s
cat jupyroot.out
cd ~

Notas Importantes: 

- En donde dice cd /disco4/personal_folders/AFlorez debemos poner la carpeta en la que vamos a trabajar. Claramente si no existe previamente debemos crearla. Hasta el momento estamos usando /disco4/personal_folders/ para guardar los Dockers.
- Los números de "--port ..." deben ser los 4 números que elegimos en el paso 2. La idea es que el Docker nos cree un jupyterlab en ese puerto.
- En donde dice "--ServerApp.token=password" debemos elegir una contraseña, esta contraseña la pregunta jupyterlab. En este caso es "password".

Guardemos estos cambios: Ctrl+X, Y, Enter. 

Luego podemos salir del modo administrador escribiendo lo siguiente:

exit

Al hacerlo estaremos nuevamente en el servidor con nuestro usuario.

7. Iniciemos el docker (ya no falta hacer configuraciones, hay que iniciarlo)

docker start jupyroot_AFlorez

8. En este punto ya podemos hacer uso del Docker. Es importante tener en cuenta lo siguiente:

- Si el Docker falla es necesario desde el servidor escribir lo siguiente: docker restart jupyroot_AFlorez
- Siempre debe haber una terminal dentro del docker abierta con el comando htop. De no ser así entonces tocaría hacer el paso 7 siempre que queramos usar el docker, se perdería mucho tiempo.

Dicho esto podemos salirnos del servidor como siempre y tratemos de entrar directamente al docker sin necesidad de entrar al servidor primero.

9. Entrar al docker: Para esto hay que añadir unos parametros al comando de ssh que siempre usabamos para entrar al servidor.

ssh -Y j.penuela@hep-server2.uniandes.edu.co -NL 2502:localhost:2502

Nota: Claramente cada persona usará el puerto que le corresponda.

Luego de ingresar contraseña la terminal se quedará así:

(root_lab) joaco@DESKTOP-20PE4DD:~$ ssh -Y j.penuela@hep-server2.uniandes.edu.co -NL 2502:localhost:2502
j.penuela@hep-server2.uniandes.edu.co's password:

10. Minimizamos la terminal y abrimos cualquier navegador (yo uso microsoft edge).

11. Ingresamos la url: http://localhost:2502/

Ese será el jupyterlab de nuestro Docker donde siempre trabajamos.

Ahí nos pedirá una contraseña, es la que se definió en el paso 6 (en este caso password).

12. IMPORTANTE: Dentro de una terminal de jupyterlab escribimos lo siguiente:

htop

Así siempre va a haber una terminal corriendo htop, esto evita que el docker se cierre. 

Luego simplemente minimizamos esa terminal y trabajamos normal dentro con jupyterlab.

13. OPCIONAL: Instalar git lfs, esto es útil para trabajar con repositorios de github que contienen archivos pesados, para esto simplemente hay que seguír los pasos explicados en http://arfc.github.io/manual/guides/git-lfs

De ahora en adelante basta con hacer los pasos 9, 10 y 11 para entrar al Docker y trabajar en él. En caso de que el docker colapse debemos hacer lo indicado en los pasos 8 y 12.


